name: ci

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

env:
  COLUMNS: 150
  UV_PYTHON: 3.13

jobs:
  build-sdist:
    name: build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      # Install protobuf compiler on Linux
      - name: Install protobuf compiler (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path python/lyricore-py/Cargo.toml
          rust-toolchain: stable
      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist
          path: dist

  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        os: [linux, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          # manylinux for various platforms, plus x86_64 pypy
          - os: linux
            manylinux: auto
            target: i686
          - os: linux
            manylinux: auto
            target: aarch64
          - os: linux
            manylinux: auto
            target: armv7
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          - os: linux
            manylinux: auto
            target: ppc64le
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          - os: linux
            manylinux: auto
            target: s390x
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          - os: linux
            manylinux: auto
            target: x86_64
            interpreter: pypy3.10 pypy3.11

          # musllinux
          - os: linux
            manylinux: musllinux_1_1
            target: x86_64
          - os: linux
            manylinux: musllinux_1_1
            target: aarch64
          - os: linux
            manylinux: musllinux_1_1
            target: armv7

          # macos;
          # all versions x86_64
          # arm pypy and older pythons which can't be run on the arm hardware for PGO
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14 pypy3.10 pypy3.11

          # windows;
          # x86_64 pypy builds are not PGO optimized
          # i686 not supported by pypy
          # aarch64 only 3.11 and up, also not PGO optimized
          - os: windows
            target: x86_64
            interpreter: pypy3.10 pypy3.11
          - os: windows
            target: i686
            python-architecture: x86
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          - os: windows
            target: aarch64
            interpreter: 3.11 3.12 3.13 3.14

        exclude:
          # See above; disabled for now.
          - os: windows
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      # Install protobuf compiler for different OS
      - name: Install protobuf compiler (Linux)
        if: matrix.os == 'linux'
        run: |
          # Download and install protoc for Linux to workspace
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          PROTOC_VERSION="30.2"
          PROTOC_ZIP="protoc-$PROTOC_VERSION-linux-x86_64.zip"
          
          # Create local bin directory in workspace
          mkdir -p ${{ github.workspace }}/.local/bin
          
          # Download and extract protoc
          curl -LO $PB_REL/download/v$PROTOC_VERSION/$PROTOC_ZIP
          unzip $PROTOC_ZIP -d ${{ github.workspace }}/.local
          
          # Make protoc executable
          chmod +x ${{ github.workspace }}/.local/bin/protoc
          
          # Add to PATH
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH
          
          # Verify installation
          ${{ github.workspace }}/.local/bin/protoc --version

      - name: Install protobuf compiler (macOS)
        if: matrix.os == 'macos'
        run: |
          brew install protobuf
          protoc --version

      - name: Install protobuf compiler (Windows)
        if: matrix.os == 'windows'
        run: |
          choco install protoc
          protoc --version

      - run: pip install -U twine 'ruff==0.5.0' typing_extensions

      - name: build wheels(linux)
        if: matrix.os == 'linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --manifest-path python/lyricore-py/Cargo.toml --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11 3.12 3.13 3.14 pypy3.10 pypy3.11' }}
          rust-toolchain: stable
          docker-options: -e CI -v ${{ github.workspace }}:/workspace -e PROTOC=/workspace/.local/bin/protoc
        env:
          DOCKER_CLIENT_TIMEOUT: 120
          COMPOSE_HTTP_TIMEOUT: 120
          PROTOC: ${{ matrix.os == 'linux' && format('{0}/.local/bin/protoc', github.workspace) || '' }}
      - name: build wheels(macos,windows)
        if: matrix.os != 'linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --manifest-path python/lyricore-py/Cargo.toml --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11 3.12 3.13 3.14 pypy3.10 pypy3.11' }}
          rust-toolchain: stable

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}_${{ matrix.interpreter || 'all' }}_${{ matrix.manylinux }}
          path: dist

  release:
    needs: [build, build-sdist]
    if: always() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    environment:
      name: release

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6

      # Install protobuf compiler for release job
      - name: Install protobuf compiler (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: uv publish --trusted-publishing always

      - name: upload to github release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}